-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn_cnn_Pipeline_VITIS_LOOP_80_1441 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sum_31 : IN STD_LOGIC_VECTOR (15 downto 0);
    W1_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    W1_ce0 : OUT STD_LOGIC;
    W1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    flattened_output_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    flattened_output_ce0 : OUT STD_LOGIC;
    flattened_output_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    flattened_output_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    flattened_output_1_ce0 : OUT STD_LOGIC;
    flattened_output_1_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    flattened_output_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    flattened_output_2_ce0 : OUT STD_LOGIC;
    flattened_output_2_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    flattened_output_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    flattened_output_3_ce0 : OUT STD_LOGIC;
    flattened_output_3_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    flattened_output_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    flattened_output_4_ce0 : OUT STD_LOGIC;
    flattened_output_4_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    flattened_output_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    flattened_output_5_ce0 : OUT STD_LOGIC;
    flattened_output_5_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    flattened_output_6_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    flattened_output_6_ce0 : OUT STD_LOGIC;
    flattened_output_6_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    flattened_output_7_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    flattened_output_7_ce0 : OUT STD_LOGIC;
    flattened_output_7_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    flattened_output_8_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    flattened_output_8_ce0 : OUT STD_LOGIC;
    flattened_output_8_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    flattened_output_9_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    flattened_output_9_ce0 : OUT STD_LOGIC;
    flattened_output_9_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    flattened_output_10_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    flattened_output_10_ce0 : OUT STD_LOGIC;
    flattened_output_10_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    flattened_output_11_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    flattened_output_11_ce0 : OUT STD_LOGIC;
    flattened_output_11_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    flattened_output_12_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    flattened_output_12_ce0 : OUT STD_LOGIC;
    flattened_output_12_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    flattened_output_13_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    flattened_output_13_ce0 : OUT STD_LOGIC;
    flattened_output_13_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sum_35_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    sum_35_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of cnn_cnn_Pipeline_VITIS_LOOP_80_1441 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv12_930 : STD_LOGIC_VECTOR (11 downto 0) := "100100110000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv15_5BE0 : STD_LOGIC_VECTOR (14 downto 0) := "101101111100000";
    constant ap_const_lv24_124A : STD_LOGIC_VECTOR (23 downto 0) := "000000000001001001001010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv12_E : STD_LOGIC_VECTOR (11 downto 0) := "000000001110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln80_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln80_reg_616 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_616_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_616_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln81_7_fu_396_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln79_fu_417_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_urem150_fu_124 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal select_ln80_fu_460_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal phi_mul148_fu_128 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    signal add_ln79_fu_401_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal sum_fu_132 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_sig_allocacmp_sum_load_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_fu_136 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal add_ln80_fu_377_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln81_fu_386_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln81_fu_390_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_fu_407_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln80_4_fu_448_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln80_4_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln81_s_fu_476_p29 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln81_s_fu_476_p30 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln81_s_fu_476_p31 : STD_LOGIC_VECTOR (14 downto 0);
    signal sum_4_fu_560_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_578_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_578_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_578_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_578_p00 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln81_s_fu_476_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln81_s_fu_476_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln81_s_fu_476_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln81_s_fu_476_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln81_s_fu_476_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln81_s_fu_476_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln81_s_fu_476_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln81_s_fu_476_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln81_s_fu_476_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln81_s_fu_476_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln81_s_fu_476_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln81_s_fu_476_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln81_s_fu_476_p25 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln81_s_fu_476_p27 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component cnn_sparsemux_29_4_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (3 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (3 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (3 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (3 downto 0);
        din9_WIDTH : INTEGER;
        CASE10 : STD_LOGIC_VECTOR (3 downto 0);
        din10_WIDTH : INTEGER;
        CASE11 : STD_LOGIC_VECTOR (3 downto 0);
        din11_WIDTH : INTEGER;
        CASE12 : STD_LOGIC_VECTOR (3 downto 0);
        din12_WIDTH : INTEGER;
        CASE13 : STD_LOGIC_VECTOR (3 downto 0);
        din13_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (14 downto 0);
        din3 : IN STD_LOGIC_VECTOR (14 downto 0);
        din4 : IN STD_LOGIC_VECTOR (14 downto 0);
        din5 : IN STD_LOGIC_VECTOR (14 downto 0);
        din6 : IN STD_LOGIC_VECTOR (14 downto 0);
        din7 : IN STD_LOGIC_VECTOR (14 downto 0);
        din8 : IN STD_LOGIC_VECTOR (14 downto 0);
        din9 : IN STD_LOGIC_VECTOR (14 downto 0);
        din10 : IN STD_LOGIC_VECTOR (14 downto 0);
        din11 : IN STD_LOGIC_VECTOR (14 downto 0);
        din12 : IN STD_LOGIC_VECTOR (14 downto 0);
        din13 : IN STD_LOGIC_VECTOR (14 downto 0);
        def : IN STD_LOGIC_VECTOR (14 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component cnn_mac_muladd_15ns_16s_22ns_22_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component cnn_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_29_4_15_1_1_U1741 : component cnn_sparsemux_29_4_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 15,
        CASE1 => "0001",
        din1_WIDTH => 15,
        CASE2 => "0010",
        din2_WIDTH => 15,
        CASE3 => "0011",
        din3_WIDTH => 15,
        CASE4 => "0100",
        din4_WIDTH => 15,
        CASE5 => "0101",
        din5_WIDTH => 15,
        CASE6 => "0110",
        din6_WIDTH => 15,
        CASE7 => "0111",
        din7_WIDTH => 15,
        CASE8 => "1000",
        din8_WIDTH => 15,
        CASE9 => "1001",
        din9_WIDTH => 15,
        CASE10 => "1010",
        din10_WIDTH => 15,
        CASE11 => "1011",
        din11_WIDTH => 15,
        CASE12 => "1100",
        din12_WIDTH => 15,
        CASE13 => "1101",
        din13_WIDTH => 15,
        def_WIDTH => 15,
        sel_WIDTH => 4,
        dout_WIDTH => 15)
    port map (
        din0 => flattened_output_q0,
        din1 => flattened_output_1_q0,
        din2 => flattened_output_2_q0,
        din3 => flattened_output_3_q0,
        din4 => flattened_output_4_q0,
        din5 => flattened_output_5_q0,
        din6 => flattened_output_6_q0,
        din7 => flattened_output_7_q0,
        din8 => flattened_output_8_q0,
        din9 => flattened_output_9_q0,
        din10 => flattened_output_10_q0,
        din11 => flattened_output_11_q0,
        din12 => flattened_output_12_q0,
        din13 => flattened_output_13_q0,
        def => sext_ln81_s_fu_476_p29,
        sel => sext_ln81_s_fu_476_p30,
        dout => sext_ln81_s_fu_476_p31);

    mac_muladd_15ns_16s_22ns_22_4_1_U1742 : component cnn_mac_muladd_15ns_16s_22ns_22_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_578_p0,
        din1 => W1_q0,
        din2 => grp_fu_578_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_578_p3);

    flow_control_loop_pipe_sequential_init_U : component cnn_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    j_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_136 <= ap_const_lv12_0;
                elsif (((icmp_ln80_fu_371_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    j_fu_136 <= add_ln80_fu_377_p2;
                end if;
            end if; 
        end if;
    end process;

    phi_mul148_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    phi_mul148_fu_128 <= ap_const_lv24_0;
                elsif (((icmp_ln80_fu_371_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    phi_mul148_fu_128 <= add_ln79_fu_401_p2;
                end if;
            end if; 
        end if;
    end process;

    phi_urem150_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    phi_urem150_fu_124 <= ap_const_lv12_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    phi_urem150_fu_124 <= select_ln80_fu_460_p3;
                end if;
            end if; 
        end if;
    end process;

    sum_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    sum_fu_132 <= sum_31;
                elsif ((ap_enable_reg_pp0_iter5 = ap_const_logic_1)) then 
                    sum_fu_132 <= sum_4_fu_560_p1(21 downto 6);
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln80_reg_616 <= icmp_ln80_fu_371_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                icmp_ln80_reg_616_pp0_iter2_reg <= icmp_ln80_reg_616;
                icmp_ln80_reg_616_pp0_iter3_reg <= icmp_ln80_reg_616_pp0_iter2_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    W1_address0 <= zext_ln81_7_fu_396_p1(16 - 1 downto 0);

    W1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W1_ce0 <= ap_const_logic_1;
        else 
            W1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln79_fu_401_p2 <= std_logic_vector(unsigned(phi_mul148_fu_128) + unsigned(ap_const_lv24_124A));
    add_ln80_4_fu_448_p2 <= std_logic_vector(unsigned(phi_urem150_fu_124) + unsigned(ap_const_lv12_1));
    add_ln80_fu_377_p2 <= std_logic_vector(unsigned(j_fu_136) + unsigned(ap_const_lv12_1));
    add_ln81_fu_390_p2 <= std_logic_vector(unsigned(zext_ln81_fu_386_p1) + unsigned(ap_const_lv15_5BE0));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln80_fu_371_p2)
    begin
        if (((icmp_ln80_fu_371_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_sum_load_4_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0, sum_fu_132, sum_4_fu_560_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            ap_sig_allocacmp_sum_load_4 <= sum_4_fu_560_p1(21 downto 6);
        else 
            ap_sig_allocacmp_sum_load_4 <= sum_fu_132;
        end if; 
    end process;

    flattened_output_10_address0 <= zext_ln79_fu_417_p1(8 - 1 downto 0);

    flattened_output_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            flattened_output_10_ce0 <= ap_const_logic_1;
        else 
            flattened_output_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flattened_output_11_address0 <= zext_ln79_fu_417_p1(8 - 1 downto 0);

    flattened_output_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            flattened_output_11_ce0 <= ap_const_logic_1;
        else 
            flattened_output_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flattened_output_12_address0 <= zext_ln79_fu_417_p1(8 - 1 downto 0);

    flattened_output_12_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            flattened_output_12_ce0 <= ap_const_logic_1;
        else 
            flattened_output_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flattened_output_13_address0 <= zext_ln79_fu_417_p1(8 - 1 downto 0);

    flattened_output_13_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            flattened_output_13_ce0 <= ap_const_logic_1;
        else 
            flattened_output_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flattened_output_1_address0 <= zext_ln79_fu_417_p1(8 - 1 downto 0);

    flattened_output_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            flattened_output_1_ce0 <= ap_const_logic_1;
        else 
            flattened_output_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flattened_output_2_address0 <= zext_ln79_fu_417_p1(8 - 1 downto 0);

    flattened_output_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            flattened_output_2_ce0 <= ap_const_logic_1;
        else 
            flattened_output_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flattened_output_3_address0 <= zext_ln79_fu_417_p1(8 - 1 downto 0);

    flattened_output_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            flattened_output_3_ce0 <= ap_const_logic_1;
        else 
            flattened_output_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flattened_output_4_address0 <= zext_ln79_fu_417_p1(8 - 1 downto 0);

    flattened_output_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            flattened_output_4_ce0 <= ap_const_logic_1;
        else 
            flattened_output_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flattened_output_5_address0 <= zext_ln79_fu_417_p1(8 - 1 downto 0);

    flattened_output_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            flattened_output_5_ce0 <= ap_const_logic_1;
        else 
            flattened_output_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flattened_output_6_address0 <= zext_ln79_fu_417_p1(8 - 1 downto 0);

    flattened_output_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            flattened_output_6_ce0 <= ap_const_logic_1;
        else 
            flattened_output_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flattened_output_7_address0 <= zext_ln79_fu_417_p1(8 - 1 downto 0);

    flattened_output_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            flattened_output_7_ce0 <= ap_const_logic_1;
        else 
            flattened_output_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flattened_output_8_address0 <= zext_ln79_fu_417_p1(8 - 1 downto 0);

    flattened_output_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            flattened_output_8_ce0 <= ap_const_logic_1;
        else 
            flattened_output_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flattened_output_9_address0 <= zext_ln79_fu_417_p1(8 - 1 downto 0);

    flattened_output_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            flattened_output_9_ce0 <= ap_const_logic_1;
        else 
            flattened_output_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flattened_output_address0 <= zext_ln79_fu_417_p1(8 - 1 downto 0);

    flattened_output_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            flattened_output_ce0 <= ap_const_logic_1;
        else 
            flattened_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_578_p0 <= grp_fu_578_p00(15 - 1 downto 0);
    grp_fu_578_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln81_s_fu_476_p31),22));
    grp_fu_578_p2 <= (ap_sig_allocacmp_sum_load_4 & ap_const_lv6_0);
    icmp_ln80_4_fu_454_p2 <= "1" when (unsigned(add_ln80_4_fu_448_p2) < unsigned(ap_const_lv12_E)) else "0";
    icmp_ln80_fu_371_p2 <= "1" when (j_fu_136 = ap_const_lv12_930) else "0";
    select_ln80_fu_460_p3 <= 
        add_ln80_4_fu_448_p2 when (icmp_ln80_4_fu_454_p2(0) = '1') else 
        ap_const_lv12_0;
    sext_ln81_s_fu_476_p29 <= "XXXXXXXXXXXXXXX";
    sext_ln81_s_fu_476_p30 <= phi_urem150_fu_124(4 - 1 downto 0);
    sum_35_out <= sum_fu_132;

    sum_35_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln80_reg_616_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln80_reg_616_pp0_iter3_reg = ap_const_lv1_1))) then 
            sum_35_out_ap_vld <= ap_const_logic_1;
        else 
            sum_35_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sum_4_fu_560_p1 <= grp_fu_578_p3;
    tmp_fu_407_p4 <= phi_mul148_fu_128(23 downto 16);
    zext_ln79_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_407_p4),64));
    zext_ln81_7_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln81_fu_390_p2),64));
    zext_ln81_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_fu_136),15));
end behav;
