// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module cnn_cnn_Pipeline_VITIS_LOOP_67_1131 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        flattened_output_13_address0,
        flattened_output_13_ce0,
        flattened_output_13_we0,
        flattened_output_13_d0,
        flattened_output_13_address1,
        flattened_output_13_ce1,
        flattened_output_13_we1,
        flattened_output_13_d1,
        flattened_output_12_address0,
        flattened_output_12_ce0,
        flattened_output_12_we0,
        flattened_output_12_d0,
        flattened_output_12_address1,
        flattened_output_12_ce1,
        flattened_output_12_we1,
        flattened_output_12_d1,
        flattened_output_11_address0,
        flattened_output_11_ce0,
        flattened_output_11_we0,
        flattened_output_11_d0,
        flattened_output_11_address1,
        flattened_output_11_ce1,
        flattened_output_11_we1,
        flattened_output_11_d1,
        flattened_output_10_address0,
        flattened_output_10_ce0,
        flattened_output_10_we0,
        flattened_output_10_d0,
        flattened_output_10_address1,
        flattened_output_10_ce1,
        flattened_output_10_we1,
        flattened_output_10_d1,
        flattened_output_9_address0,
        flattened_output_9_ce0,
        flattened_output_9_we0,
        flattened_output_9_d0,
        flattened_output_9_address1,
        flattened_output_9_ce1,
        flattened_output_9_we1,
        flattened_output_9_d1,
        flattened_output_8_address0,
        flattened_output_8_ce0,
        flattened_output_8_we0,
        flattened_output_8_d0,
        flattened_output_8_address1,
        flattened_output_8_ce1,
        flattened_output_8_we1,
        flattened_output_8_d1,
        flattened_output_7_address0,
        flattened_output_7_ce0,
        flattened_output_7_we0,
        flattened_output_7_d0,
        flattened_output_7_address1,
        flattened_output_7_ce1,
        flattened_output_7_we1,
        flattened_output_7_d1,
        flattened_output_6_address0,
        flattened_output_6_ce0,
        flattened_output_6_we0,
        flattened_output_6_d0,
        flattened_output_6_address1,
        flattened_output_6_ce1,
        flattened_output_6_we1,
        flattened_output_6_d1,
        flattened_output_5_address0,
        flattened_output_5_ce0,
        flattened_output_5_we0,
        flattened_output_5_d0,
        flattened_output_5_address1,
        flattened_output_5_ce1,
        flattened_output_5_we1,
        flattened_output_5_d1,
        flattened_output_4_address0,
        flattened_output_4_ce0,
        flattened_output_4_we0,
        flattened_output_4_d0,
        flattened_output_4_address1,
        flattened_output_4_ce1,
        flattened_output_4_we1,
        flattened_output_4_d1,
        flattened_output_3_address0,
        flattened_output_3_ce0,
        flattened_output_3_we0,
        flattened_output_3_d0,
        flattened_output_3_address1,
        flattened_output_3_ce1,
        flattened_output_3_we1,
        flattened_output_3_d1,
        flattened_output_2_address0,
        flattened_output_2_ce0,
        flattened_output_2_we0,
        flattened_output_2_d0,
        flattened_output_2_address1,
        flattened_output_2_ce1,
        flattened_output_2_we1,
        flattened_output_2_d1,
        flattened_output_1_address0,
        flattened_output_1_ce0,
        flattened_output_1_we0,
        flattened_output_1_d0,
        flattened_output_1_address1,
        flattened_output_1_ce1,
        flattened_output_1_we1,
        flattened_output_1_d1,
        flattened_output_address0,
        flattened_output_ce0,
        flattened_output_we0,
        flattened_output_d0,
        flattened_output_address1,
        flattened_output_ce1,
        flattened_output_we1,
        flattened_output_d1,
        output_conv_2_address0,
        output_conv_2_ce0,
        output_conv_2_q0,
        output_conv_2_1_address0,
        output_conv_2_1_ce0,
        output_conv_2_1_q0,
        output_conv_2_2_address0,
        output_conv_2_2_ce0,
        output_conv_2_2_q0,
        output_conv_2_3_address0,
        output_conv_2_3_ce0,
        output_conv_2_3_q0,
        output_conv_2_4_address0,
        output_conv_2_4_ce0,
        output_conv_2_4_q0,
        output_conv_2_5_address0,
        output_conv_2_5_ce0,
        output_conv_2_5_q0,
        output_conv_2_6_address0,
        output_conv_2_6_ce0,
        output_conv_2_6_q0,
        output_conv_2_7_address0,
        output_conv_2_7_ce0,
        output_conv_2_7_q0,
        output_conv_2_8_address0,
        output_conv_2_8_ce0,
        output_conv_2_8_q0,
        output_conv_2_9_address0,
        output_conv_2_9_ce0,
        output_conv_2_9_q0,
        output_conv_2_10_address0,
        output_conv_2_10_ce0,
        output_conv_2_10_q0,
        output_conv_2_11_address0,
        output_conv_2_11_ce0,
        output_conv_2_11_q0,
        output_conv_2_12_address0,
        output_conv_2_12_ce0,
        output_conv_2_12_q0,
        output_conv_2_13_address0,
        output_conv_2_13_ce0,
        output_conv_2_13_q0,
        output_conv_2_14_address0,
        output_conv_2_14_ce0,
        output_conv_2_14_q0,
        output_conv_2_15_address0,
        output_conv_2_15_ce0,
        output_conv_2_15_q0,
        output_conv_2_16_address0,
        output_conv_2_16_ce0,
        output_conv_2_16_q0,
        output_conv_2_17_address0,
        output_conv_2_17_ce0,
        output_conv_2_17_q0,
        output_conv_2_18_address0,
        output_conv_2_18_ce0,
        output_conv_2_18_q0,
        output_conv_2_19_address0,
        output_conv_2_19_ce0,
        output_conv_2_19_q0,
        output_conv_2_20_address0,
        output_conv_2_20_ce0,
        output_conv_2_20_q0,
        output_conv_2_21_address0,
        output_conv_2_21_ce0,
        output_conv_2_21_q0,
        output_conv_2_22_address0,
        output_conv_2_22_ce0,
        output_conv_2_22_q0,
        output_conv_2_23_address0,
        output_conv_2_23_ce0,
        output_conv_2_23_q0,
        output_conv_2_24_address0,
        output_conv_2_24_ce0,
        output_conv_2_24_q0,
        output_conv_2_25_address0,
        output_conv_2_25_ce0,
        output_conv_2_25_q0,
        output_conv_2_26_address0,
        output_conv_2_26_ce0,
        output_conv_2_26_q0,
        output_conv_2_27_address0,
        output_conv_2_27_ce0,
        output_conv_2_27_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] flattened_output_13_address0;
output   flattened_output_13_ce0;
output   flattened_output_13_we0;
output  [14:0] flattened_output_13_d0;
output  [7:0] flattened_output_13_address1;
output   flattened_output_13_ce1;
output   flattened_output_13_we1;
output  [14:0] flattened_output_13_d1;
output  [7:0] flattened_output_12_address0;
output   flattened_output_12_ce0;
output   flattened_output_12_we0;
output  [14:0] flattened_output_12_d0;
output  [7:0] flattened_output_12_address1;
output   flattened_output_12_ce1;
output   flattened_output_12_we1;
output  [14:0] flattened_output_12_d1;
output  [7:0] flattened_output_11_address0;
output   flattened_output_11_ce0;
output   flattened_output_11_we0;
output  [14:0] flattened_output_11_d0;
output  [7:0] flattened_output_11_address1;
output   flattened_output_11_ce1;
output   flattened_output_11_we1;
output  [14:0] flattened_output_11_d1;
output  [7:0] flattened_output_10_address0;
output   flattened_output_10_ce0;
output   flattened_output_10_we0;
output  [14:0] flattened_output_10_d0;
output  [7:0] flattened_output_10_address1;
output   flattened_output_10_ce1;
output   flattened_output_10_we1;
output  [14:0] flattened_output_10_d1;
output  [7:0] flattened_output_9_address0;
output   flattened_output_9_ce0;
output   flattened_output_9_we0;
output  [14:0] flattened_output_9_d0;
output  [7:0] flattened_output_9_address1;
output   flattened_output_9_ce1;
output   flattened_output_9_we1;
output  [14:0] flattened_output_9_d1;
output  [7:0] flattened_output_8_address0;
output   flattened_output_8_ce0;
output   flattened_output_8_we0;
output  [14:0] flattened_output_8_d0;
output  [7:0] flattened_output_8_address1;
output   flattened_output_8_ce1;
output   flattened_output_8_we1;
output  [14:0] flattened_output_8_d1;
output  [7:0] flattened_output_7_address0;
output   flattened_output_7_ce0;
output   flattened_output_7_we0;
output  [14:0] flattened_output_7_d0;
output  [7:0] flattened_output_7_address1;
output   flattened_output_7_ce1;
output   flattened_output_7_we1;
output  [14:0] flattened_output_7_d1;
output  [7:0] flattened_output_6_address0;
output   flattened_output_6_ce0;
output   flattened_output_6_we0;
output  [14:0] flattened_output_6_d0;
output  [7:0] flattened_output_6_address1;
output   flattened_output_6_ce1;
output   flattened_output_6_we1;
output  [14:0] flattened_output_6_d1;
output  [7:0] flattened_output_5_address0;
output   flattened_output_5_ce0;
output   flattened_output_5_we0;
output  [14:0] flattened_output_5_d0;
output  [7:0] flattened_output_5_address1;
output   flattened_output_5_ce1;
output   flattened_output_5_we1;
output  [14:0] flattened_output_5_d1;
output  [7:0] flattened_output_4_address0;
output   flattened_output_4_ce0;
output   flattened_output_4_we0;
output  [14:0] flattened_output_4_d0;
output  [7:0] flattened_output_4_address1;
output   flattened_output_4_ce1;
output   flattened_output_4_we1;
output  [14:0] flattened_output_4_d1;
output  [7:0] flattened_output_3_address0;
output   flattened_output_3_ce0;
output   flattened_output_3_we0;
output  [14:0] flattened_output_3_d0;
output  [7:0] flattened_output_3_address1;
output   flattened_output_3_ce1;
output   flattened_output_3_we1;
output  [14:0] flattened_output_3_d1;
output  [7:0] flattened_output_2_address0;
output   flattened_output_2_ce0;
output   flattened_output_2_we0;
output  [14:0] flattened_output_2_d0;
output  [7:0] flattened_output_2_address1;
output   flattened_output_2_ce1;
output   flattened_output_2_we1;
output  [14:0] flattened_output_2_d1;
output  [7:0] flattened_output_1_address0;
output   flattened_output_1_ce0;
output   flattened_output_1_we0;
output  [14:0] flattened_output_1_d0;
output  [7:0] flattened_output_1_address1;
output   flattened_output_1_ce1;
output   flattened_output_1_we1;
output  [14:0] flattened_output_1_d1;
output  [7:0] flattened_output_address0;
output   flattened_output_ce0;
output   flattened_output_we0;
output  [14:0] flattened_output_d0;
output  [7:0] flattened_output_address1;
output   flattened_output_ce1;
output   flattened_output_we1;
output  [14:0] flattened_output_d1;
output  [4:0] output_conv_2_address0;
output   output_conv_2_ce0;
input  [14:0] output_conv_2_q0;
output  [4:0] output_conv_2_1_address0;
output   output_conv_2_1_ce0;
input  [14:0] output_conv_2_1_q0;
output  [4:0] output_conv_2_2_address0;
output   output_conv_2_2_ce0;
input  [14:0] output_conv_2_2_q0;
output  [4:0] output_conv_2_3_address0;
output   output_conv_2_3_ce0;
input  [14:0] output_conv_2_3_q0;
output  [4:0] output_conv_2_4_address0;
output   output_conv_2_4_ce0;
input  [14:0] output_conv_2_4_q0;
output  [4:0] output_conv_2_5_address0;
output   output_conv_2_5_ce0;
input  [14:0] output_conv_2_5_q0;
output  [4:0] output_conv_2_6_address0;
output   output_conv_2_6_ce0;
input  [14:0] output_conv_2_6_q0;
output  [4:0] output_conv_2_7_address0;
output   output_conv_2_7_ce0;
input  [14:0] output_conv_2_7_q0;
output  [4:0] output_conv_2_8_address0;
output   output_conv_2_8_ce0;
input  [14:0] output_conv_2_8_q0;
output  [4:0] output_conv_2_9_address0;
output   output_conv_2_9_ce0;
input  [14:0] output_conv_2_9_q0;
output  [4:0] output_conv_2_10_address0;
output   output_conv_2_10_ce0;
input  [14:0] output_conv_2_10_q0;
output  [4:0] output_conv_2_11_address0;
output   output_conv_2_11_ce0;
input  [14:0] output_conv_2_11_q0;
output  [4:0] output_conv_2_12_address0;
output   output_conv_2_12_ce0;
input  [14:0] output_conv_2_12_q0;
output  [4:0] output_conv_2_13_address0;
output   output_conv_2_13_ce0;
input  [14:0] output_conv_2_13_q0;
output  [4:0] output_conv_2_14_address0;
output   output_conv_2_14_ce0;
input  [14:0] output_conv_2_14_q0;
output  [4:0] output_conv_2_15_address0;
output   output_conv_2_15_ce0;
input  [14:0] output_conv_2_15_q0;
output  [4:0] output_conv_2_16_address0;
output   output_conv_2_16_ce0;
input  [14:0] output_conv_2_16_q0;
output  [4:0] output_conv_2_17_address0;
output   output_conv_2_17_ce0;
input  [14:0] output_conv_2_17_q0;
output  [4:0] output_conv_2_18_address0;
output   output_conv_2_18_ce0;
input  [14:0] output_conv_2_18_q0;
output  [4:0] output_conv_2_19_address0;
output   output_conv_2_19_ce0;
input  [14:0] output_conv_2_19_q0;
output  [4:0] output_conv_2_20_address0;
output   output_conv_2_20_ce0;
input  [14:0] output_conv_2_20_q0;
output  [4:0] output_conv_2_21_address0;
output   output_conv_2_21_ce0;
input  [14:0] output_conv_2_21_q0;
output  [4:0] output_conv_2_22_address0;
output   output_conv_2_22_ce0;
input  [14:0] output_conv_2_22_q0;
output  [4:0] output_conv_2_23_address0;
output   output_conv_2_23_ce0;
input  [14:0] output_conv_2_23_q0;
output  [4:0] output_conv_2_24_address0;
output   output_conv_2_24_ce0;
input  [14:0] output_conv_2_24_q0;
output  [4:0] output_conv_2_25_address0;
output   output_conv_2_25_ce0;
input  [14:0] output_conv_2_25_q0;
output  [4:0] output_conv_2_26_address0;
output   output_conv_2_26_ce0;
input  [14:0] output_conv_2_26_q0;
output  [4:0] output_conv_2_27_address0;
output   output_conv_2_27_ce0;
input  [14:0] output_conv_2_27_q0;

reg ap_idle;
reg flattened_output_13_ce0;
reg flattened_output_13_we0;
reg flattened_output_13_ce1;
reg flattened_output_13_we1;
reg flattened_output_12_ce0;
reg flattened_output_12_we0;
reg flattened_output_12_ce1;
reg flattened_output_12_we1;
reg flattened_output_11_ce0;
reg flattened_output_11_we0;
reg flattened_output_11_ce1;
reg flattened_output_11_we1;
reg flattened_output_10_ce0;
reg flattened_output_10_we0;
reg flattened_output_10_ce1;
reg flattened_output_10_we1;
reg flattened_output_9_ce0;
reg flattened_output_9_we0;
reg flattened_output_9_ce1;
reg flattened_output_9_we1;
reg flattened_output_8_ce0;
reg flattened_output_8_we0;
reg flattened_output_8_ce1;
reg flattened_output_8_we1;
reg flattened_output_7_ce0;
reg flattened_output_7_we0;
reg flattened_output_7_ce1;
reg flattened_output_7_we1;
reg flattened_output_6_ce0;
reg flattened_output_6_we0;
reg flattened_output_6_ce1;
reg flattened_output_6_we1;
reg flattened_output_5_ce0;
reg flattened_output_5_we0;
reg flattened_output_5_ce1;
reg flattened_output_5_we1;
reg flattened_output_4_ce0;
reg flattened_output_4_we0;
reg flattened_output_4_ce1;
reg flattened_output_4_we1;
reg flattened_output_3_ce0;
reg flattened_output_3_we0;
reg flattened_output_3_ce1;
reg flattened_output_3_we1;
reg flattened_output_2_ce0;
reg flattened_output_2_we0;
reg flattened_output_2_ce1;
reg flattened_output_2_we1;
reg flattened_output_1_ce0;
reg flattened_output_1_we0;
reg flattened_output_1_ce1;
reg flattened_output_1_we1;
reg flattened_output_ce0;
reg flattened_output_we0;
reg flattened_output_ce1;
reg flattened_output_we1;
reg output_conv_2_ce0;
reg output_conv_2_1_ce0;
reg output_conv_2_2_ce0;
reg output_conv_2_3_ce0;
reg output_conv_2_4_ce0;
reg output_conv_2_5_ce0;
reg output_conv_2_6_ce0;
reg output_conv_2_7_ce0;
reg output_conv_2_8_ce0;
reg output_conv_2_9_ce0;
reg output_conv_2_10_ce0;
reg output_conv_2_11_ce0;
reg output_conv_2_12_ce0;
reg output_conv_2_13_ce0;
reg output_conv_2_14_ce0;
reg output_conv_2_15_ce0;
reg output_conv_2_16_ce0;
reg output_conv_2_17_ce0;
reg output_conv_2_18_ce0;
reg output_conv_2_19_ce0;
reg output_conv_2_20_ce0;
reg output_conv_2_21_ce0;
reg output_conv_2_22_ce0;
reg output_conv_2_23_ce0;
reg output_conv_2_24_ce0;
reg output_conv_2_25_ce0;
reg output_conv_2_26_ce0;
reg output_conv_2_27_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln67_fu_879_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln67_fu_891_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln64_fu_931_p1;
wire   [63:0] zext_ln70_fu_955_p1;
reg   [4:0] i_fu_116;
wire   [4:0] add_ln67_fu_885_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i_1;
reg   [7:0] indvars_iv65_fu_120;
wire   [7:0] add_ln67_1_fu_973_p2;
wire   [7:0] or_ln70_fu_949_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 i_fu_116 = 5'd0;
#0 indvars_iv65_fu_120 = 8'd0;
#0 ap_done_reg = 1'b0;
end

cnn_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln67_fu_879_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_116 <= add_ln67_fu_885_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_116 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvars_iv65_fu_120 <= 8'd112;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            indvars_iv65_fu_120 <= add_ln67_1_fu_973_p2;
        end
    end
end

always @ (*) begin
    if (((icmp_ln67_fu_879_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 5'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_116;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_10_ce0 = 1'b1;
    end else begin
        flattened_output_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_10_ce1 = 1'b1;
    end else begin
        flattened_output_10_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_10_we0 = 1'b1;
    end else begin
        flattened_output_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_10_we1 = 1'b1;
    end else begin
        flattened_output_10_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_11_ce0 = 1'b1;
    end else begin
        flattened_output_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_11_ce1 = 1'b1;
    end else begin
        flattened_output_11_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_11_we0 = 1'b1;
    end else begin
        flattened_output_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_11_we1 = 1'b1;
    end else begin
        flattened_output_11_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_12_ce0 = 1'b1;
    end else begin
        flattened_output_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_12_ce1 = 1'b1;
    end else begin
        flattened_output_12_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_12_we0 = 1'b1;
    end else begin
        flattened_output_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_12_we1 = 1'b1;
    end else begin
        flattened_output_12_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_13_ce0 = 1'b1;
    end else begin
        flattened_output_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_13_ce1 = 1'b1;
    end else begin
        flattened_output_13_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_13_we0 = 1'b1;
    end else begin
        flattened_output_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_13_we1 = 1'b1;
    end else begin
        flattened_output_13_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_1_ce0 = 1'b1;
    end else begin
        flattened_output_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_1_ce1 = 1'b1;
    end else begin
        flattened_output_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_1_we0 = 1'b1;
    end else begin
        flattened_output_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_1_we1 = 1'b1;
    end else begin
        flattened_output_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_2_ce0 = 1'b1;
    end else begin
        flattened_output_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_2_ce1 = 1'b1;
    end else begin
        flattened_output_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_2_we0 = 1'b1;
    end else begin
        flattened_output_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_2_we1 = 1'b1;
    end else begin
        flattened_output_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_3_ce0 = 1'b1;
    end else begin
        flattened_output_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_3_ce1 = 1'b1;
    end else begin
        flattened_output_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_3_we0 = 1'b1;
    end else begin
        flattened_output_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_3_we1 = 1'b1;
    end else begin
        flattened_output_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_4_ce0 = 1'b1;
    end else begin
        flattened_output_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_4_ce1 = 1'b1;
    end else begin
        flattened_output_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_4_we0 = 1'b1;
    end else begin
        flattened_output_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_4_we1 = 1'b1;
    end else begin
        flattened_output_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_5_ce0 = 1'b1;
    end else begin
        flattened_output_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_5_ce1 = 1'b1;
    end else begin
        flattened_output_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_5_we0 = 1'b1;
    end else begin
        flattened_output_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_5_we1 = 1'b1;
    end else begin
        flattened_output_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_6_ce0 = 1'b1;
    end else begin
        flattened_output_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_6_ce1 = 1'b1;
    end else begin
        flattened_output_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_6_we0 = 1'b1;
    end else begin
        flattened_output_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_6_we1 = 1'b1;
    end else begin
        flattened_output_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_7_ce0 = 1'b1;
    end else begin
        flattened_output_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_7_ce1 = 1'b1;
    end else begin
        flattened_output_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_7_we0 = 1'b1;
    end else begin
        flattened_output_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_7_we1 = 1'b1;
    end else begin
        flattened_output_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_8_ce0 = 1'b1;
    end else begin
        flattened_output_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_8_ce1 = 1'b1;
    end else begin
        flattened_output_8_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_8_we0 = 1'b1;
    end else begin
        flattened_output_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_8_we1 = 1'b1;
    end else begin
        flattened_output_8_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_9_ce0 = 1'b1;
    end else begin
        flattened_output_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_9_ce1 = 1'b1;
    end else begin
        flattened_output_9_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_9_we0 = 1'b1;
    end else begin
        flattened_output_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_9_we1 = 1'b1;
    end else begin
        flattened_output_9_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_ce0 = 1'b1;
    end else begin
        flattened_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_ce1 = 1'b1;
    end else begin
        flattened_output_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_we0 = 1'b1;
    end else begin
        flattened_output_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flattened_output_we1 = 1'b1;
    end else begin
        flattened_output_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_conv_2_10_ce0 = 1'b1;
    end else begin
        output_conv_2_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_conv_2_11_ce0 = 1'b1;
    end else begin
        output_conv_2_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_conv_2_12_ce0 = 1'b1;
    end else begin
        output_conv_2_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_conv_2_13_ce0 = 1'b1;
    end else begin
        output_conv_2_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_conv_2_14_ce0 = 1'b1;
    end else begin
        output_conv_2_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_conv_2_15_ce0 = 1'b1;
    end else begin
        output_conv_2_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_conv_2_16_ce0 = 1'b1;
    end else begin
        output_conv_2_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_conv_2_17_ce0 = 1'b1;
    end else begin
        output_conv_2_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_conv_2_18_ce0 = 1'b1;
    end else begin
        output_conv_2_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_conv_2_19_ce0 = 1'b1;
    end else begin
        output_conv_2_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_conv_2_1_ce0 = 1'b1;
    end else begin
        output_conv_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_conv_2_20_ce0 = 1'b1;
    end else begin
        output_conv_2_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_conv_2_21_ce0 = 1'b1;
    end else begin
        output_conv_2_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_conv_2_22_ce0 = 1'b1;
    end else begin
        output_conv_2_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_conv_2_23_ce0 = 1'b1;
    end else begin
        output_conv_2_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_conv_2_24_ce0 = 1'b1;
    end else begin
        output_conv_2_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_conv_2_25_ce0 = 1'b1;
    end else begin
        output_conv_2_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_conv_2_26_ce0 = 1'b1;
    end else begin
        output_conv_2_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_conv_2_27_ce0 = 1'b1;
    end else begin
        output_conv_2_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_conv_2_2_ce0 = 1'b1;
    end else begin
        output_conv_2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_conv_2_3_ce0 = 1'b1;
    end else begin
        output_conv_2_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_conv_2_4_ce0 = 1'b1;
    end else begin
        output_conv_2_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_conv_2_5_ce0 = 1'b1;
    end else begin
        output_conv_2_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_conv_2_6_ce0 = 1'b1;
    end else begin
        output_conv_2_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_conv_2_7_ce0 = 1'b1;
    end else begin
        output_conv_2_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_conv_2_8_ce0 = 1'b1;
    end else begin
        output_conv_2_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_conv_2_9_ce0 = 1'b1;
    end else begin
        output_conv_2_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_conv_2_ce0 = 1'b1;
    end else begin
        output_conv_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln67_1_fu_973_p2 = (indvars_iv65_fu_120 + 8'd2);

assign add_ln67_fu_885_p2 = (ap_sig_allocacmp_i_1 + 5'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign flattened_output_10_address0 = zext_ln70_fu_955_p1;

assign flattened_output_10_address1 = zext_ln64_fu_931_p1;

assign flattened_output_10_d0 = output_conv_2_24_q0;

assign flattened_output_10_d1 = output_conv_2_10_q0;

assign flattened_output_11_address0 = zext_ln70_fu_955_p1;

assign flattened_output_11_address1 = zext_ln64_fu_931_p1;

assign flattened_output_11_d0 = output_conv_2_25_q0;

assign flattened_output_11_d1 = output_conv_2_11_q0;

assign flattened_output_12_address0 = zext_ln70_fu_955_p1;

assign flattened_output_12_address1 = zext_ln64_fu_931_p1;

assign flattened_output_12_d0 = output_conv_2_26_q0;

assign flattened_output_12_d1 = output_conv_2_12_q0;

assign flattened_output_13_address0 = zext_ln70_fu_955_p1;

assign flattened_output_13_address1 = zext_ln64_fu_931_p1;

assign flattened_output_13_d0 = output_conv_2_27_q0;

assign flattened_output_13_d1 = output_conv_2_13_q0;

assign flattened_output_1_address0 = zext_ln70_fu_955_p1;

assign flattened_output_1_address1 = zext_ln64_fu_931_p1;

assign flattened_output_1_d0 = output_conv_2_15_q0;

assign flattened_output_1_d1 = output_conv_2_1_q0;

assign flattened_output_2_address0 = zext_ln70_fu_955_p1;

assign flattened_output_2_address1 = zext_ln64_fu_931_p1;

assign flattened_output_2_d0 = output_conv_2_16_q0;

assign flattened_output_2_d1 = output_conv_2_2_q0;

assign flattened_output_3_address0 = zext_ln70_fu_955_p1;

assign flattened_output_3_address1 = zext_ln64_fu_931_p1;

assign flattened_output_3_d0 = output_conv_2_17_q0;

assign flattened_output_3_d1 = output_conv_2_3_q0;

assign flattened_output_4_address0 = zext_ln70_fu_955_p1;

assign flattened_output_4_address1 = zext_ln64_fu_931_p1;

assign flattened_output_4_d0 = output_conv_2_18_q0;

assign flattened_output_4_d1 = output_conv_2_4_q0;

assign flattened_output_5_address0 = zext_ln70_fu_955_p1;

assign flattened_output_5_address1 = zext_ln64_fu_931_p1;

assign flattened_output_5_d0 = output_conv_2_19_q0;

assign flattened_output_5_d1 = output_conv_2_5_q0;

assign flattened_output_6_address0 = zext_ln70_fu_955_p1;

assign flattened_output_6_address1 = zext_ln64_fu_931_p1;

assign flattened_output_6_d0 = output_conv_2_20_q0;

assign flattened_output_6_d1 = output_conv_2_6_q0;

assign flattened_output_7_address0 = zext_ln70_fu_955_p1;

assign flattened_output_7_address1 = zext_ln64_fu_931_p1;

assign flattened_output_7_d0 = output_conv_2_21_q0;

assign flattened_output_7_d1 = output_conv_2_7_q0;

assign flattened_output_8_address0 = zext_ln70_fu_955_p1;

assign flattened_output_8_address1 = zext_ln64_fu_931_p1;

assign flattened_output_8_d0 = output_conv_2_22_q0;

assign flattened_output_8_d1 = output_conv_2_8_q0;

assign flattened_output_9_address0 = zext_ln70_fu_955_p1;

assign flattened_output_9_address1 = zext_ln64_fu_931_p1;

assign flattened_output_9_d0 = output_conv_2_23_q0;

assign flattened_output_9_d1 = output_conv_2_9_q0;

assign flattened_output_address0 = zext_ln70_fu_955_p1;

assign flattened_output_address1 = zext_ln64_fu_931_p1;

assign flattened_output_d0 = output_conv_2_14_q0;

assign flattened_output_d1 = output_conv_2_q0;

assign icmp_ln67_fu_879_p2 = ((ap_sig_allocacmp_i_1 == 5'd28) ? 1'b1 : 1'b0);

assign or_ln70_fu_949_p2 = (indvars_iv65_fu_120 | 8'd1);

assign output_conv_2_10_address0 = zext_ln67_fu_891_p1;

assign output_conv_2_11_address0 = zext_ln67_fu_891_p1;

assign output_conv_2_12_address0 = zext_ln67_fu_891_p1;

assign output_conv_2_13_address0 = zext_ln67_fu_891_p1;

assign output_conv_2_14_address0 = zext_ln67_fu_891_p1;

assign output_conv_2_15_address0 = zext_ln67_fu_891_p1;

assign output_conv_2_16_address0 = zext_ln67_fu_891_p1;

assign output_conv_2_17_address0 = zext_ln67_fu_891_p1;

assign output_conv_2_18_address0 = zext_ln67_fu_891_p1;

assign output_conv_2_19_address0 = zext_ln67_fu_891_p1;

assign output_conv_2_1_address0 = zext_ln67_fu_891_p1;

assign output_conv_2_20_address0 = zext_ln67_fu_891_p1;

assign output_conv_2_21_address0 = zext_ln67_fu_891_p1;

assign output_conv_2_22_address0 = zext_ln67_fu_891_p1;

assign output_conv_2_23_address0 = zext_ln67_fu_891_p1;

assign output_conv_2_24_address0 = zext_ln67_fu_891_p1;

assign output_conv_2_25_address0 = zext_ln67_fu_891_p1;

assign output_conv_2_26_address0 = zext_ln67_fu_891_p1;

assign output_conv_2_27_address0 = zext_ln67_fu_891_p1;

assign output_conv_2_2_address0 = zext_ln67_fu_891_p1;

assign output_conv_2_3_address0 = zext_ln67_fu_891_p1;

assign output_conv_2_4_address0 = zext_ln67_fu_891_p1;

assign output_conv_2_5_address0 = zext_ln67_fu_891_p1;

assign output_conv_2_6_address0 = zext_ln67_fu_891_p1;

assign output_conv_2_7_address0 = zext_ln67_fu_891_p1;

assign output_conv_2_8_address0 = zext_ln67_fu_891_p1;

assign output_conv_2_9_address0 = zext_ln67_fu_891_p1;

assign output_conv_2_address0 = zext_ln67_fu_891_p1;

assign zext_ln64_fu_931_p1 = indvars_iv65_fu_120;

assign zext_ln67_fu_891_p1 = ap_sig_allocacmp_i_1;

assign zext_ln70_fu_955_p1 = or_ln70_fu_949_p2;

endmodule //cnn_cnn_Pipeline_VITIS_LOOP_67_1131
